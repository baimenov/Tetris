/**
 * 
 */
package view;


import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.BoxLayout;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;


/**
 * Tetris GUI, with game itself and next piece panel.
 * 
 * @author baimenov
 * @version December 3 2016
 */
public class TetrisGUI extends JFrame  {
    
    private static final long serialVersionUID = 5756891741199164333L;
    
    /**
     * Frame Size of the Tetris.
     */
    private static final Dimension FRAME_SIZE = new Dimension(700, 858);
    
    /**
     * Tetris Panel.
     */
    private GamePanel myPanel;
    
    /**
     * Panel with the next Tetris piece.
     */
    private JPanel myNextPanel;
    
    /**
     * Menu bar with help submenu.
     */
    private JMenuBar myMenuBar;

    /**
     * Tetris GUI initialization.
     */
    public TetrisGUI() {
        super("TCSS 305 - Tetris");
        myPanel = new GamePanel();
        myMenuBar = createMenu();
        myNextPanel = createPanel();
        add(myNextPanel, BorderLayout.EAST);
        add(myMenuBar, BorderLayout.NORTH);
        add(myPanel, BorderLayout.CENTER);
        addKeyListener(new TetrisKeyListener());
    }
    
    /**
     * Starts tetris.
     */
    public void start() {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(FRAME_SIZE);
        setLocationRelativeTo(null);
        setResizable(false);
        setVisible(true);
    }
    
    /**
     * Creates menu bar.
     * @return JMenuBar menu bar.
     */
    private JMenuBar createMenu() {
        final JMenuBar menu = new JMenuBar();
        final JMenu helpMenu = new JMenu("Help");
        final JMenuItem controls = new JMenuItem("Controls");
        controls.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent theEvent) {
                JOptionPane.showMessageDialog(TetrisGUI.this, "Left Arrow - Move left\n"
                                + "Right Arrow - Move right\n"
                                + "Down Arrow - Shift down\nUp Arrow - Rotate 90° clockwise\n"
                                + "Space - Drop the piece",
                                              "How to control pieces",
                                              JOptionPane.INFORMATION_MESSAGE);
            }
        });
        helpMenu.add(controls);
        menu.add(helpMenu);
        return menu;
    }
    
    /**
     * Creates Side panel with next piece panel in it.
     * @return JPanel side panel.
     */
    private JPanel createPanel() {
        final JPanel jp = new JPanel();
        final BoxLayout b = new BoxLayout(jp, BoxLayout.PAGE_AXIS);
        jp.setLayout(b);
        jp.setBackground(Color.GREEN);
        jp.setPreferredSize(new Dimension(294, 100));
        final JPanel npp = new NextPiecePanel();
        npp.setAlignmentX(CENTER_ALIGNMENT);
        jp.add(npp);
        return jp;
    }
    
    /**
     * Inner class that handles key inputs.
     * @author baimenov
     * @version December 3 2016
     */
    private class TetrisKeyListener implements KeyListener {
        
        @Override
        public void keyTyped(final KeyEvent theEvent) {
            
        }
        
        @Override
        public void keyPressed(final KeyEvent theEvent) {
            if (theEvent.getKeyCode() == KeyEvent.VK_DOWN) {
                myPanel.getBoard().down();
            } else if (theEvent.getKeyCode() == KeyEvent.VK_RIGHT) {
                myPanel.getBoard().right();
            } else if (theEvent.getKeyCode() == KeyEvent.VK_LEFT) {
                myPanel.getBoard().left();
            } else if (theEvent.getKeyCode() == KeyEvent.VK_UP) {
                myPanel.getBoard().rotate();
            } else if (theEvent.getKeyCode() == KeyEvent.VK_SPACE) {
                myPanel.getBoard().drop();
            }
        }

        @Override
        public void keyReleased(final KeyEvent theEvent) {
    
        }
    }

}
